#!/usr/bin/env bash
set -e
set -u
set -o pipefail
# set -x

which ocrd >/dev/null 2>/dev/null || { echo "ocrd not in \$PATH. Panicking"; exit 1; }

SHAREDIR="$(cd "$(dirname "$0")" >/dev/null && pwd)"
SCRIPT_NAME="${0##*/}"

MIMETYPE_PAGE=$(ocrd bashlib constants MIMETYPE_PAGE)

main () {
    # Load ocrd bashlib functions
    # shellcheck source=../core/ocrd/bashlib/lib.bash
    source $(ocrd bashlib filename)

    # Require at least 2.15.0
    ocrd__minversion 2.15.0

    # Describe calling script to lib.bash
    ocrd__wrap "$SHAREDIR/ocrd-tool.json" "$SCRIPT_NAME" "$@"

    cd "${ocrd__argv[working_dir]}"
    page_id=${ocrd__argv[page_id]:-}
    in_file_grp=${ocrd__argv[input_file_grp]}
    out_file_grp=${ocrd__argv[output_file_grp]}
    mkdir -p $out_file_grp

    # read params
    local from_to script_args output_extension
    script_args=(${params['script-args']:-})
    from_to=(${params['from-to']})
    output_extension=${params['ext']}

    # Download the files and do the conversion
    local IFS=$'\n'
    files=($(ocrd workspace find \
        ${page_id:+-g} ${page_id:-} \
        -G $in_file_grp \
        -k local_filename \
        -k ID \
        -k pageId \
        --download))
    local IFS=$' \t\n'
    local n=0 zeros=0000
    for csv in "${files[@]}"; do
        let n+=1
        # Parse comma separated fields
        local IFS=$'\t'
        local fields=($csv)
        local IFS=$' \t\n'

        local in_file="${fields[0]}"
        local in_id="${fields[1]}"
        local pageid="${fields[2]:-}"

        if ! test -f "$in_file"; then
           ocrd__log error "input file \"$in_file\" ID=${in_id} (pageId=${pageid}) is not on disk"
           continue
        fi

        # Output filename
        local out_id="${in_id//$in_file_grp/$out_file_grp}"
        if [ "x$out_id" = "x$in_id" ]; then
            out_id=${out_file_grp}_${zeros:0:$((4-${#n}))}$n
        fi
        local out_file="$out_file_grp/${out_id}$output_extension"

        # Output mimetype
        local output_mimetype
        case "${from_to[1]}" in
            alto*) output_mimetype="application/alto+xml" ;;
            page*) output_mimetype="$MIMETYPE_PAGE" ;;
            hocr*) output_mimetype="text/html" ;;
            text) output_mimetype="text/plain" ;;
        esac

        # Actual conversion
        ocrd__log info "${from_to[0]} --> ${from_to[1]}: input file $in_id ($pageid)"
        ocr-transform "${from_to[@]}" "$in_file" "$out_file" -- ${script_args[@]}

        # Add the output files
        declare -a options
        if [ -n "$pageid" ]; then
            options=( -g $pageid )
        else
            options=()
        fi
        options+=( -G $out_file_grp
                   -m "$output_mimetype"
                   -i "$out_id"
                   "$out_file" )
        ocrd workspace add "${options[@]}"
    done
}


main "$@"
