#!/usr/bin/env bash
#set -e
#set -u
set -o pipefail
# set -x

which ocrd >/dev/null 2>/dev/null || { echo "ocrd not in \$PATH. Panicking"; exit 1; }

SHAREDIR="$(cd "$(dirname "$0")" >/dev/null && pwd)"
SCRIPT_NAME="${0##*/}"

MIMETYPE_PAGE=$(ocrd bashlib constants MIMETYPE_PAGE)

main () {
    # Load ocrd bashlib functions
    # shellcheck source=../core/ocrd/bashlib/lib.bash
    source $(ocrd bashlib filename)

    # Describe calling script to lib.bash
    ocrd__wrap "$SHAREDIR/ocrd-tool.json" "$SCRIPT_NAME" "$@"
    ocrd__minversion 2.30.0

    cd "${ocrd__argv[working_dir]}"
    page_id=${ocrd__argv[page_id]:-}
    in_file_grp=${ocrd__argv[input_file_grp]}
    out_file_grp=${ocrd__argv[output_file_grp]}
    overwrite=${ocrd__argv[overwrite]}
 
    # read params
    local from_to script_args out_extension out_mimetype
    script_args=(${params['script-args']:-})
    from_to=(${params['from-to']})
    out_extension=${params['ext']}
    if [[ -z "$out_extension" ]];then
        case "${from_to[1]}" in
            page*|alto*) out_extension=".xml" ;;
            hocr*) out_extension=".html" ;;
            text*) out_extension=".txt" ;;
        esac
    fi
    case "${from_to[1]}" in
        alto*) out_mimetype="application/alto+xml" ;;
        page*) out_mimetype="$MIMETYPE_PAGE" ;;
        hocr*) out_mimetype="text/html" ;;
        text) out_mimetype="text/plain" ;;
    esac

    for ((n=0; n<${#ocrd__files[*]}; n++)); do
        local in_fpath="$(ocrd__input_file $n url)"
        local in_id="$(ocrd__input_file $n ID)"
        local in_mimetype="$(ocrd__input_file $n mimetype)"
        local in_pageId="$(ocrd__input_file $n pageId)"
        local out_id="$(ocrd__input_file $n outputFileId)"
        local out_fpath="$out_file_grp/${out_id}.xml"

        if [[ "$in_mimetype" =~ ^image/.* ]]; then
            ocrd log debug "ignoring image $in_id ($in_pageId)"
            continue
        elif ! test -f "${in_fpath#file://}"; then
            ocrd log error "input file \"$in_fpath\" ID=${in_id} (pageId=${in_pageId}) is not on disk"
            continue
        else
            ocrd log debug "processing input file $in_id ($in_pageId)"
        fi
        mkdir -p $out_file_grp

        # Actual conversion
        ocrd log info "${from_to[0]} --> ${from_to[1]}: input file $in_id ($in_pageId)"
        ocr-transform "${from_to[@]}" "$in_fpath" "$out_fpath" -- ${script_args[@]} 2>&1
        retval="$?"

        if (( retval > 0 ));then
            ocrd log error "exited with status $retval: ocr-transform ${from_to[*]} $in_fpath $out_fpath -- ${script_args[*]}"
            continue
        fi

        if [ ! -e "$out_fpath" ];then
            ocrd log error "Transformation exited with return value 0 but no file was written."
            continue
        fi

        # Add the output files
        ocrd log info "Successfully executed: ocr-transform ${from_to[*]} $in_fpath $out_fpath -- ${script_args[*]}"

        # Aggregate all METS actions
        results+=( "$in_pageId $out_id $out_fpath" )
    done

    # Write resulting METS at once
    declare -a options
    options=(-G $out_file_grp -m "$out_mimetype")
    options+=(-r '(?P<page>[^ ]*) (?P<fid>[^ ]*) (?P<fpath>.*)')
    options+=(-g '{{ page }}' -i '{{ fid }}' -S '{{ fpath }}')
    if [ "$overwrite" = "true" ];then
        options+=(--force)
    fi
    IFS=$'\n'
    echo "${results[*]}" | ocrd workspace bulk-add "${options[@]}" -
    IFS=$' \t\n'
}


main "$@"
